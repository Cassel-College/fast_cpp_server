# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build on a Linux platform HOST

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install env
      run: |
        sudo apt-get update
        sudo apt-get upgrade -y
        sudo apt-get install -y build-essential gcc g++ cmake git curl wget unzip gcovr nginx doxygen graphviz graphviz-dev python3.12 python3-pip libssl-dev libcurl4-openssl-dev clangd-14 libgmp-dev
        sudo apt-get clean

    - name: Download external and Build target folder
      run: sh ${{github.workspace}}/build.sh

    - name: Build
      run: |
        cd ${{github.workspace}}/build
        cmake ..
        make -j
        ls -l
      
    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -R "fast_cpp_server_my_Test.*" -E "(PingGoogle|GetGPUInfoTest|GetProcessInfoTest|Shutdown_String|Shutdown_MyStruct|MyLogTest.DefaultInit|MySystemHealthyManagerInitAndGetData)"

    - name: Cpack
      working-directory: ${{github.workspace}}/build
      run: sudo cpack

